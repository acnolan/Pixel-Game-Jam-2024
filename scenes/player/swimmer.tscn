[gd_scene load_steps=17 format=3 uid="uid://xdp87vh2ffos"]

[ext_resource type="Texture2D" uid="uid://8m63iqdby7m5" path="res://art/player_sprite/SWIM qwop character sprite sheet.png" id="1_qkuc5"]
[ext_resource type="Script" path="res://scenes/player/Arm1Forearm.gd" id="2_nn45m"]
[ext_resource type="Script" path="res://scenes/player/Arm2Forearm.gd" id="3_evm5r"]

[sub_resource type="GDScript" id="GDScript_2comb"]
resource_name = "headscript"
script/source = "extends RigidBody2D

var is_drowning: bool = false
var timer_started: bool = false
var timer: SceneTreeTimer

@onready var timeCreated = Time.get_ticks_msec()

func _ready():
	FadeDie.stopAnimation()

func _process(delta):
	# If we have survived the whole game, display the victory screen
	# TODO: Currently set to 3 minutes. We will need to adjust based on the actual length
	if Time.get_ticks_msec() - timeCreated > 180000:
		get_tree().change_scene_to_file(\"res://scenes/win/winner_winner_chicken_dinner.tscn\")
	
	if is_drowning and not timer_started:
		timer_started = true
		timer = get_tree().create_timer(3)
		FadeDie.transition()

	if not is_drowning and timer_started:
		timer_started = false
		FadeDie.stopAnimation()
	
	if(timer_started):
		get_node(\"../../BreathBar\").updateAir((timer.time_left/3)*100)
		
	if timer_started and timer.time_left == 0:
		timer_started = false
		get_tree().change_scene_to_file(\"res://scenes/game_over/game_over.tscn\")

func _on_area_2d_drowning_change_state(in_water):
	is_drowning = in_water
"

[sub_resource type="CircleShape2D" id="CircleShape2D_mga26"]
radius = 8.0

[sub_resource type="GDScript" id="GDScript_qxe4f"]
resource_name = "drowningdetection"
script/source = "extends Area2D

signal drowning_change_state(in_water : bool)

var is_drowning: bool = false

func _on_body_entered(body):
	var overlapping_bodies = get_overlapping_bodies()

	if (overlapping_bodies.size() >= 1):
		is_drowning = true
		emit_signal(\"drowning_change_state\", is_drowning)

func _on_body_exited(body):
	var overlapping_bodies = get_overlapping_bodies()

	if (overlapping_bodies.size() == 0):
		is_drowning = false
		emit_signal(\"drowning_change_state\", is_drowning)
"

[sub_resource type="CircleShape2D" id="CircleShape2D_2ybsd"]
radius = 8.0

[sub_resource type="GDScript" id="GDScript_5lu3n"]
resource_name = "bodyscript"
script/source = "extends RigidBody2D

var is_in_water: bool = false
var gravity = ProjectSettings.get_setting(\"physics/2d/default_gravity\")
@export var SWIM_GRAVITY : float = 0.25
@export var SWIM_VELOCITY_CAP: float = 0

func _physics_process(delta):
	if is_in_water:
		linear_velocity.y = clampf(linear_velocity.y + (gravity + delta * SWIM_GRAVITY), -SWIM_VELOCITY_CAP, SWIM_VELOCITY_CAP)

func _on_area_2d_water_state_changed(in_water):
	is_in_water = in_water

"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_euftq"]
size = Vector2(48, 16)

[sub_resource type="GDScript" id="GDScript_8ehw0"]
resource_name = "WaterDetection"
script/source = "extends Area2D

signal water_state_changed(in_water : bool)

var is_in_water: bool = false
const SPLASH = preload(\"res://scenes/water/splash.tscn\")

func _on_body_entered(body):
	var overlapping_bodies = get_overlapping_bodies()

	if (overlapping_bodies.size() >= 1):
		if (is_in_water == false):
			var splash = SPLASH.instantiate()
			get_parent().add_child(splash)
		is_in_water = true
		emit_signal(\"water_state_changed\", is_in_water)

func _on_body_exited(body):
	var overlapping_bodies = get_overlapping_bodies()

	if (overlapping_bodies.size() == 0):
		if (is_in_water == true):
			var splash = SPLASH.instantiate()
			get_parent().add_child(splash)
		is_in_water = false
		emit_signal(\"water_state_changed\", is_in_water)
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_8jrvi"]
size = Vector2(48, 16)

[sub_resource type="GDScript" id="GDScript_bifso"]
resource_name = "arm1"
script/source = "extends RigidBody2D


# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	if Input.is_action_just_pressed(\"KEY_I\"):
		apply_central_impulse(Vector2(10,-1500))
		apply_torque(-150)
	if Input.is_action_just_released(\"KEY_I\"):
		apply_torque(-150)
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_ocqkf"]
size = Vector2(48, 8)

[sub_resource type="GDScript" id="GDScript_eliv6"]
resource_name = "arm2"
script/source = "extends RigidBody2D


# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	if Input.is_action_just_pressed(\"KEY_M\"):
		apply_central_impulse(Vector2(10,-1500))
		apply_torque(-150)
	if Input.is_action_just_released(\"KEY_M\"):
		apply_torque(-150)
"

[sub_resource type="GDScript" id="GDScript_vf11m"]
resource_name = "leg1"
script/source = "extends RigidBody2D


# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	if Input.is_key_label_pressed(KEY_W):
		apply_impulse(Vector2(200,100), Vector2(0, 16))
		apply_torque(80)
"

[sub_resource type="GDScript" id="GDScript_5bbhy"]
resource_name = "leg2"
script/source = "extends RigidBody2D


# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	if Input.is_key_label_pressed(KEY_S):
		apply_impulse(Vector2(200,100), Vector2(0, 16))
		apply_torque(80)
"

[node name="Swimmer" type="Node2D"]

[node name="Head" type="RigidBody2D" parent="."]
position = Vector2(33, -10)
collision_layer = 16
collision_mask = 16
script = SubResource("GDScript_2comb")
metadata/_edit_group_ = true

[node name="CollisionShape2D" type="CollisionShape2D" parent="Head"]
shape = SubResource("CircleShape2D_mga26")

[node name="Sprite2D" type="Sprite2D" parent="Head"]
scale = Vector2(0.5, 0.5)
texture = ExtResource("1_qkuc5")
region_enabled = true
region_rect = Rect2(386, 79, 43, 31)

[node name="Area2D" type="Area2D" parent="Head"]
collision_layer = 0
collision_mask = 2
script = SubResource("GDScript_qxe4f")

[node name="CollisionShape2D" type="CollisionShape2D" parent="Head/Area2D"]
shape = SubResource("CircleShape2D_2ybsd")

[node name="NeckPin" type="PinJoint2D" parent="."]
position = Vector2(24, -6)
node_a = NodePath("../Head")
node_b = NodePath("../Body")

[node name="Body" type="RigidBody2D" parent="."]
z_index = 1
position = Vector2(0, 1)
collision_layer = 32
collision_mask = 32
script = SubResource("GDScript_5lu3n")
metadata/_edit_group_ = true

[node name="CollisionShape2D" type="CollisionShape2D" parent="Body"]
shape = SubResource("RectangleShape2D_euftq")

[node name="Sprite2D" type="Sprite2D" parent="Body"]
scale = Vector2(0.4, 0.4)
texture = ExtResource("1_qkuc5")
region_enabled = true
region_rect = Rect2(227, 91, 134, 48)

[node name="Area2D" type="Area2D" parent="Body"]
collision_layer = 0
collision_mask = 2
script = SubResource("GDScript_8ehw0")

[node name="CollisionShape2D" type="CollisionShape2D" parent="Body/Area2D"]
shape = SubResource("RectangleShape2D_8jrvi")

[node name="Arm1Bicep" type="RigidBody2D" parent="."]
z_index = 2
position = Vector2(29, -4)
collision_layer = 64
collision_mask = 64
script = SubResource("GDScript_bifso")
metadata/_edit_group_ = true

[node name="Sprite2D" type="Sprite2D" parent="Arm1Bicep"]
rotation = -2.77856
scale = Vector2(0.6, 0.4)
texture = ExtResource("1_qkuc5")
region_enabled = true
region_rect = Rect2(567, 49, 40, 31)
metadata/_edit_group_ = true

[node name="CollisionShape2D" type="CollisionShape2D" parent="Arm1Bicep"]
scale = Vector2(0.5, 1)
shape = SubResource("RectangleShape2D_ocqkf")
metadata/_edit_group_ = true

[node name="ArmpitPin1" type="PinJoint2D" parent="."]
position = Vector2(19, -5)
node_a = NodePath("../Body")
node_b = NodePath("../Arm1Bicep")

[node name="Arm1Forearm" type="RigidBody2D" parent="."]
z_index = 2
position = Vector2(54, -5)
collision_layer = 64
collision_mask = 64
script = ExtResource("2_nn45m")
metadata/_edit_group_ = true

[node name="Sprite2D" type="Sprite2D" parent="Arm1Forearm"]
rotation = -2.41903
scale = Vector2(0.4, 0.4)
texture = ExtResource("1_qkuc5")
region_enabled = true
region_rect = Rect2(515, 92, 56, 52)
metadata/_edit_group_ = true

[node name="CollisionShape2D" type="CollisionShape2D" parent="Arm1Forearm"]
scale = Vector2(0.5, 1)
shape = SubResource("RectangleShape2D_ocqkf")
metadata/_edit_group_ = true

[node name="ElbowPin1" type="PinJoint2D" parent="."]
position = Vector2(39, -4)
node_a = NodePath("../Arm1Forearm")
node_b = NodePath("../Arm1Bicep")

[node name="Arm2Bicep" type="RigidBody2D" parent="."]
position = Vector2(34, 6)
collision_layer = 4
collision_mask = 4
script = SubResource("GDScript_eliv6")
metadata/_edit_group_ = true

[node name="Sprite2D" type="Sprite2D" parent="Arm2Bicep"]
rotation = -2.73493
scale = Vector2(0.6, 0.4)
texture = ExtResource("1_qkuc5")
region_enabled = true
region_rect = Rect2(479, 52, 37, 29)
metadata/_edit_group_ = true

[node name="CollisionShape2D" type="CollisionShape2D" parent="Arm2Bicep"]
scale = Vector2(0.5, 1)
shape = SubResource("RectangleShape2D_ocqkf")
metadata/_edit_group_ = true

[node name="ArmpitPin2" type="PinJoint2D" parent="."]
position = Vector2(25, 4)
node_a = NodePath("../Body")
node_b = NodePath("../Arm2Bicep")

[node name="Arm2Forearm" type="RigidBody2D" parent="."]
z_index = 3
position = Vector2(57, 6)
collision_layer = 4
collision_mask = 4
script = ExtResource("3_evm5r")
metadata/_edit_group_ = true

[node name="Sprite2D" type="Sprite2D" parent="Arm2Forearm"]
rotation = -2.41903
scale = Vector2(0.4, 0.4)
texture = ExtResource("1_qkuc5")
region_enabled = true
region_rect = Rect2(516, 90, 56, 54)
metadata/_edit_group_ = true

[node name="CollisionShape2D" type="CollisionShape2D" parent="Arm2Forearm"]
scale = Vector2(0.5, 1)
shape = SubResource("RectangleShape2D_ocqkf")
metadata/_edit_group_ = true

[node name="ElbowPin2" type="PinJoint2D" parent="."]
position = Vector2(44, 7)
node_a = NodePath("../Arm2Forearm")
node_b = NodePath("../Arm2Bicep")

[node name="Leg1" type="RigidBody2D" parent="."]
z_index = 2
position = Vector2(-46, 4)
collision_layer = 8
collision_mask = 8
script = SubResource("GDScript_vf11m")
metadata/_edit_group_ = true

[node name="Sprite2D" type="Sprite2D" parent="Leg1"]
scale = Vector2(0.3, 0.3)
texture = ExtResource("1_qkuc5")
region_enabled = true
region_rect = Rect2(19, 89, 161, 54)
metadata/_edit_group_ = true

[node name="CollisionShape2D" type="CollisionShape2D" parent="Leg1"]
shape = SubResource("RectangleShape2D_ocqkf")
metadata/_edit_group_ = true

[node name="HipPin1" type="PinJoint2D" parent="."]
position = Vector2(-24, -1)
node_a = NodePath("../Body")
node_b = NodePath("../Leg1")

[node name="Leg2" type="RigidBody2D" parent="."]
position = Vector2(-47, 12)
collision_layer = 128
collision_mask = 128
script = SubResource("GDScript_5bbhy")
metadata/_edit_group_ = true

[node name="Sprite2D" type="Sprite2D" parent="Leg2"]
scale = Vector2(0.3, 0.3)
texture = ExtResource("1_qkuc5")
region_enabled = true
region_rect = Rect2(27, 145, 162, 53)
metadata/_edit_group_ = true

[node name="CollisionShape2D" type="CollisionShape2D" parent="Leg2"]
shape = SubResource("RectangleShape2D_ocqkf")
metadata/_edit_group_ = true

[node name="HipPin2" type="PinJoint2D" parent="."]
position = Vector2(-24, 7)
node_a = NodePath("../Body")
node_b = NodePath("../Leg2")

[connection signal="body_entered" from="Head/Area2D" to="Head/Area2D" method="_on_body_entered"]
[connection signal="body_exited" from="Head/Area2D" to="Head/Area2D" method="_on_body_exited"]
[connection signal="drowning_change_state" from="Head/Area2D" to="Head" method="_on_area_2d_drowning_change_state"]
[connection signal="body_entered" from="Body/Area2D" to="Body/Area2D" method="_on_body_entered"]
[connection signal="body_exited" from="Body/Area2D" to="Body/Area2D" method="_on_body_exited"]
[connection signal="water_state_changed" from="Body/Area2D" to="Body" method="_on_area_2d_water_state_changed"]
